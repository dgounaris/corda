@Library('corda-shared-build-pipeline-steps')
import static com.r3.build.BuildControl.killAllExistingBuildsForJob

killAllExistingBuildsForJob(env.JOB_NAME, env.BUILD_NUMBER.toInteger())

pipeline {
    agent { label 'local-k8s' }
    options {
        timestamps()
        buildDiscarder(logRotator(daysToKeepStr: '7', artifactDaysToKeepStr: '7'))
        timeout(time: 3, unit: 'HOURS')
    }

    environment {
        DOCKER_TAG_TO_USE = "${env.GIT_COMMIT.subSequence(0, 8)}"
        EXECUTOR_NUMBER = "${env.EXECUTOR_NUMBER}"
        BUILD_ID = "${env.BUILD_ID}-${env.JOB_NAME}"
        ARTIFACTORY_CREDENTIALS = credentials('artifactory-credentials')
    }

    stages {
        stage('Corda Pull Request - Generate Build Image') {
            steps {
                withCredentials([string(credentialsId: 'container_reg_passwd', variable: 'DOCKER_PUSH_PWD')]) {
                    sh "./gradlew " +
                            "-Dkubenetize=true " +
                            "-Ddocker.push.password=\"\${DOCKER_PUSH_PWD}\" " +
                            "-Ddocker.work.dir=\"/tmp/\${EXECUTOR_NUMBER}\" " +
                            "-Ddocker.build.tag=\"\${DOCKER_TAG_TO_USE}\"" +
                            " clean pushBuildImage --stacktrace"
                }
                sh "kubectl auth can-i get pods"
            }
        }

        stage('Testing phase') {
            parallel {
                stage('Regression Test') {
                    steps {
                        sh "./gradlew " +
                                "-DbuildId=\"\${BUILD_ID}\" " +
                                "-Dkubenetize=true " +
                                "-Ddocker.run.tag=\"\${DOCKER_TAG_TO_USE}\" " +
                                "-Dartifactory.username=\"\${ARTIFACTORY_CREDENTIALS_USR}\" " +
                                "-Dartifactory.password=\"\${ARTIFACTORY_CREDENTIALS_PSW}\" " +
                                "-Dgit.branch=\"\${GIT_BRANCH}\" " +
                                "-Dgit.target.branch=\"\${GIT_BRANCH}\" " +
                                " parallelRegressionTest --stacktrace"
                    }
                }
                stage('Slow Integration Test') {
                    steps {
                        sh "./gradlew " +
                                "-DbuildId=\"\${BUILD_ID}\" " +
                                "-Dkubenetize=true " +
                                "-Ddocker.run.tag=\"\${DOCKER_TAG_TO_USE}\" " +
                                "-Dartifactory.username=\"\${ARTIFACTORY_CREDENTIALS_USR}\" " +
                                "-Dartifactory.password=\"\${ARTIFACTORY_CREDENTIALS_PSW}\" " +
                                "-Dgit.branch=\"\${GIT_BRANCH}\" " +
                                "-Dgit.target.branch=\"\${GIT_BRANCH}\" " +
                                " allParallelSlowIntegrationTest --stacktrace"
                    }
                }
            }
        }
    }


    post {
        always {
            archiveArtifacts artifacts: '**/pod-logs/**/*.log', fingerprint: false
            junit '**/build/test-results-xml/**/*.xml'

            script {
                try {
                    /*
                     * Copy all JUnit results files into a single top level directory.
                     * This is necessary to stop the allure plugin from hitting out
                     * of memory errors due to being passed many directories with
                     * long paths.
                     *
                     * File names are pre-pended with the pod number when
                     * copied to avoid collisions between files where the same test
                     * classes have run on multiple pods.
                     */
                    fileOperations([fileCopyOperation(
                            includes: '**/test-results-xml/**/test-runs/test-reports/**',
                            targetLocation: 'allure-input',
                            flattenFiles: true,
                            renameFiles: true,
                            sourceCaptureExpression: '.*test-results-xml/.*-([\\d]+)/.*/([^/]+)$',
                            targetNameExpression: '$1-$2')])
                    allure includeProperties: false,
                           jdk: '',
                           results: [[path: '**/allure-input']]
                } catch (err) {
                    echo("Allure report generation failed: $err")

                    if (currentBuild.resultIsBetterOrEqualTo('SUCCESS')) {
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
            
            script
            {
                // We want to send a summary email, but want to limit to once per day.
                // Comparing the dates of the previous and current builds achieves this,
                // i.e. we will only send an email for the first build on a given day.
                def prevBuildDate = new Date(
                        currentBuild?.previousBuild.timeInMillis ?: 0).clearTime()
                def currentBuildDate = new Date(
                        currentBuild.timeInMillis).clearTime()

                if (prevBuildDate != currentBuildDate) {
                    def statusSymbol = '\u2753'
                    switch(currentBuild.result) {
                        case 'SUCCESS':
                            statusSymbol = '\u2705'
                            break;
                        case 'UNSTABLE':
                        case 'FAILURE':
                            statusSymbol = '\u274c'
                            break;
                        default:
                            break;
                    }

                    echo('First build for this date, sending summary email')
                    emailext to: '$DEFAULT_RECIPIENTS',
                        subject: "$statusSymbol" + '$BRANCH_NAME regression tests - $BUILD_STATUS',
                        mimeType: 'text/html',
                        body: '${SCRIPT, template="groovy-html.template"}'
                } else {
                    echo('Already sent summary email today, suppressing')
                }
            }
        }
        cleanup {
            deleteDir() /* clean up our workspace */
        }
    }
}
